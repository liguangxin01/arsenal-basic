apiVersion: v1
kind: Service
metadata:
  name: opensearch
spec:
  selector:
    app: opensearch
  ports:
    - name: http
      protocol: TCP
      port: 9200
      targetPort: 9200
    - name: pa
      protocol: TCP
      port: 9600
      targetPort: 9600
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: opensearch
spec:
  serviceName: "opensearch"
  replicas: 2
  selector:
    matchLabels:
      app: opensearch
  template:
    metadata:
      labels:
        app: opensearch
    spec:
      initContainers:
        - name: sysctl
          image: busybox:1.36
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
          securityContext:
            privileged: true
      containers:
        - name: opensearch
          image: docker.io/opensearchproject/opensearch:2.10.0
          ports:
            - containerPort: 9300
              name: transport
          env:
            - name: cluster.name
              value: opensearch-cluster
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: discovery.seed_hosts
              value: opensearch-0.opensearch.opensearch-namespace.svc.cluster.local,opensearch-1.opensearch.opensearch-namespace.svc.cluster.local
            - name: cluster.initial_master_nodes
              value: opensearch-0,opensearch-1
            - name: bootstrap.memory_lock
              value: "false"
            - name: OPENSEARCH_JAVA_OPTS
              value: "-Xms512m -Xmx512m"
            - name: DISABLE_SECURITY_PLUGIN
              value: "true"
          securityContext:
            privileged: true
            capabilities:
              add: ["IPC_LOCK"]
          resources:
            limits:
              memory: 32Gi
          volumeMounts:
            - name: opensearch-data
              mountPath: /usr/share/opensearch/data
      volumes:
        - name: opensearch-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: opensearch-dashboards
spec:
  selector:
    app: opensearch-dashboards
  ports:
    - name: http
      protocol: TCP
      port: 5601
      targetPort: 5601
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opensearch-dashboards
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opensearch-dashboards
  template:
    metadata:
      labels:
        app: opensearch-dashboards
    spec:
      containers:
        - name: opensearch-dashboards
          image: docker.io/opensearchproject/opensearch-dashboards:2.10.0
          env:
            - name: OPENSEARCH_HOSTS
              value: '["http://opensearch:9200"]'
            - name: DISABLE_SECURITY_DASHBOARDS_PLUGIN
              value: "true"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: opensearch-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: control.opensearch.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: opensearch-dashboards
            port:
              number: 5601
  - host: search.opensearch.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: opensearch
            port:
              number: 9200
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: opensearch-ingress-whitelist
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/whitelist-source-range: "39.107.243.62"
spec:
  rules:
  - host: arsenal-logs.lingyiwanwu.net
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: opensearch-dashboards
            port:
              number: 5601
  - host: arsenal-search.lingyiwanwu.net  #api访问级别的还有问题，场景不对，类似postman就访问不了 
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: opensearch
            port:
              number: 9200
